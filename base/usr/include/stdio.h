#pragma once

#include <sys/types.h>
#include <stddef.h>
#include <stdarg.h>

typedef unsigned int fpos_t;

#define F_FLAG_R 1
#define F_FLAG_W 2
#define F_FLAG_AUTOBUF 8

typedef struct s_file
{
    int fd;
    unsigned int flags;

    int b_off;
    int bufsize;
    unsigned char *buffer;

    int unget_char;

    int error;
    unsigned char eof;
    unsigned char have_ungetc;
    unsigned char buffer_type;
    unsigned char _u;

    pthread_mutex_t mutex;

    struct s_file *next;
    struct s_file *prev;
} FILE;
//} s_file_t;
//#define FILE s_file_t

extern FILE *stdin, *stdout, *stderr;

#define BUFSIZ 256

#define _IONBF 0 //   Input/output unbuffered.
#define _IOLBF 1 //    Input/output line buffered.
#define _IOFBF 2 //    Input/output fully buffered.

#define SEEK_CUR 0 // Seek relative to current position.
#define SEEK_SET 1 // Seek relative to start - of - file.
#define SEEK_END 2 // Seek relative to end - of - file.

//FILENAME_MAX //    Maximum size in bytes of the longest pathname that the implementation guarantees can be opened.
//FOPEN_MAX //    Number of streams which the implementation guarantees can be open simultaneously. The value is at least eight.
//TMP_MAX //Minimum number of unique filenames generated by tmpnam(). Maximum number of times an application can call tmpnam() reliably. The value of {TMP_MAX} is at least 25. [Option End]

#define EOF (-1) // End-of-file return value.

char *ctermid(char *);


int feof(FILE *);
int ferror(FILE *);
void clearerr(FILE *);
int fflush(FILE *);
FILE *fdopen(int, const char *);
FILE *fopen(const char *, const char *);
FILE *freopen(const char *, const char *, FILE *);
int fclose(FILE *);
int fseek(FILE *, long, int);
int fseeko(FILE *, off_t, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
off_t ftello(FILE *);
int fileno(FILE *);
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);

FILE *fmemopen(void *, size_t, const char *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
int fscanf(FILE *, const char *, ...);
size_t fwrite(const void *, size_t, size_t, FILE *);

int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
// int getc(FILE *);
#define getc(s) fgetc(s)
int getchar(void);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
ssize_t getdelim(char **, size_t *, int, FILE *);
ssize_t getline(char **, size_t *, FILE *);
char *gets(char *);

FILE *open_memstream(char **, size_t *);
int pclose(FILE *);
FILE *popen(const char *, const char *);

int fprintf(FILE *, const char *, ...);
void perror(const char *s);
int printf(const char *, ...);
int dprintf(int, const char *, ...);
int snprintf(char *, size_t, const char *, ...);
int sprintf(char *, const char *, ...);
int vdprintf(int, const char *, va_list);
int vfprintf(FILE *, const char *, va_list);
int vprintf(const char *, va_list);
int vsprintf(char *, const char *, va_list);
int vsnprintf(char *, size_t, const char *, va_list);

#define putc(c, stream) fputc(c, stream)

int putchar(int c);
int fputc(int c, FILE *stream);
int putc_unlocked(int c, FILE *stream);
int putchar_unlocked(int c);

int puts(const char *s);
int remove(const char *);
int rename(const char *, const char *);
int renameat(int, const char *, int, const char *);
void rewind(FILE *);
int scanf(const char *, ...);
void setbuf(FILE *, char *);
int setvbuf(FILE *, char *, int, size_t);
int sscanf(const char *, const char *, ...);
char *tempnam(const char *, const char *);
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfscanf(FILE *, const char *, va_list);
int vscanf(const char *, va_list);
int vsscanf(const char *, const char *, va_list);
